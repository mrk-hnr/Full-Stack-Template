//1. Initialize npm and install dependencies
// express, dotenv, cors, mongodb, ejs, nodemon (--save-dev)
    // express - helps nodejs manage servers and routes.
    // dotenv - hides the secret stuff. Creates environment variables and hides it out of main code e.g database password Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.
    // cors - allows to bypass cors error from running locally.
    // mongodb - database
    // ejs - helps nodejs create html template/helps with templating
    // nodemon - auto refreshes terminal for every save to see changes realtime. Similar to live server but on VSCode terminal. Install using the ff command: npm install nodemon --save-dev
    // go to package.json and add the ff under scripts, quotation included: "dev": "nodemon server.js"

//2. Require dependencies in server.js
    // example: const express = require("express")

//3. Declare variables

//4. Connect to MongoDB - add connection string to .env file

//5 Create .gitignore file and add .env and node_modules file to .gitignore

//6. Push to github

//7. Create Port

//----Test Mongo and Port Connection - USE npm run dev to run after manually adding "dev": "nodemon server.js" in package.json

//8. Set middleware - When transferring data back and forth (database to mobile to whatever), helps read/format data in a way that all parties can understand.

//9. Create Public and Views folders - add main.js and style.css to Public and index.ejs to Views

//10. Add content to index.ejs, style.css, main.js (index.ejs servers .html but may be generated via main.js)
// In my case, I added my API fetch template for all index, js, and css.

//11. Create heroku repo -- CAN SKIP, HEROKU NO LONGER FREE

// heroku login
// heroku create simple-rap-api
// echo "web: node server.js" > Procfile
// git add . 
// git commit -m "changes"
// git push heroku main

//----Test Heroku Link